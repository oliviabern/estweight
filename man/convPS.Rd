% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convPS.R
\name{convPS}
\alias{convPS}
\title{Estimate a causal effect in a convenience sample}
\usage{
convPS(
  convSamp,
  repSamp,
  sampwt_vars,
  PS_vars,
  treatment_var,
  response_var,
  outcome_family = stats::gaussian
)
}
\arguments{
\item{convSamp}{Convenience sample stored as a data frame. It should contain variables for
estimating the sampling weight, for estimating the propensity score, the treatment variable, and the response variable.
Note that all factors in the dataset should either be binary or of class factor.}

\item{repSamp}{Representative sample stored as a data frame. It should contain variables for
estimating the sampling weight. The variables for estimating the sampling weight should be named
the same as they are in the convenience sample (convSamp).
Note that all factors in the dataset should either be binary or of class factor.}

\item{sampwt_vars}{A vector of column names used for estimating the sampling weights. These variables
should be present in both the convenience sample (convSamp) and the representative sample (repSamp).}

\item{PS_vars}{A vector of column names used for estimating the sampling weights. These variables
should be present in the convenience sample (convSamp).}

\item{treatment_var}{The column name for the treatment variable. This variable
should be present in the convenience sample (convSamp).}

\item{response_var}{The column name for the response variable. This variable
should be present in the convenience sample (convSamp).}

\item{outcome_family}{Error distribution and link function for the response variable. Defaults to a gaussian distribution with an identity link. (See
\code{family} for details of family function)}
}
\value{
\code{convPS} returns a list containing the estimated treatment effect
(Treatment_effect_est) and corresponding standard error (Treatment_effect_SE)
that accounts for uncertainty from estimating the sampling weights and propensity scores
}
\description{
Propensity adjusted causal effects are estimated for convenience samples and
sampling bias is adjusted for, with standard errors that accounts for uncertainy
in estimating sampling weights and propensity scores.
}
\details{
Sampling weights are estimated for the
convenience sample using an auxiliary dataset. The weights are estimated with
logistic regression and stepwise forward selection. The estimated sampling weights
are then used to estimate propensity scores. The propensity scores are estimated
using logistic regression and stepwise selection with quadratic terms and two-way
interactions. The causal effect is estimated with a propensity adjusted GLM that
uses the estimated sampling weights. The estimated causal effect is returned with a
standard error that is estimated using a simultaneous estimating equation that accounts
for uncertainty from the weight estimating and propensity score estimation process.

@references “Causal Inference in Convenience Samples.”
Bernstein, OM; Vegetabile, BG; Grill, JD; Gillen, DL. Forthcoming.
}
\examples{
# Simulated a convenience sample and a representative sample
require(MASS)
expit = function(x){exp(x)/(1+exp(x))}
n.pop = 10000; n = 2000

Sigma = matrix(c(1,.9,.9,1),nrow = 2)
cont = mvrnorm(n.pop, mu = c(0,0), Sigma = Sigma)
K.full = ifelse(cont[,1] > 0, 1, 0)
x1.full = ifelse(cont[,2] > 0, 1, 0)
prob.sample = .6*K.full + .2

# get convenince sample
CSamp = sample(1:n.pop, size = n, prob = prob.sample)
x1.b = x1.full[CSamp]
K.b = K.full[CSamp]

# get simple random sample (SRS)
SRS = sample(1:n.pop, size = n)
x1.s = x1.full[SRS]
K.s = K.full[SRS]

# get remaining covariates for biased sample
x2.b = rnorm(n,0,2)
x3.b = rnorm(n,0,2)
pi.b = expit((log(1.3)*x2.b + log(.4)*x3.b)*(1-K.b) +
(log(2)*x2.b + log(1.5)*x3.b)*(K.b))
T.b = rbinom(n,1,pi.b)
x4.b = rnorm(n,0,1)
x5.b = rnorm(n,0,1)
y.b = rnorm(n, mean = (0 + 1*T.b + 3*T.b*K.b + 1.5*x2.b - 2*x3.b^2 - 1*x4.b + 1.5*x5.b^3), sd = 1)
convSamp = data.frame(x1 = x1.b, x2 = x2.b, x3 = x3.b,
 x4 = x4.b, x5 = x5.b, Tx = T.b, y = y.b)
 repSamp = data.frame(x1 = x1.s)

convPS(convSamp = convSamp, repSamp = repSamp,
sampwt_vars = "x1", PS_vars = paste0("x",1:4),
treatment_var = "Tx", response_var = "y")

}
