% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convGLM.R
\name{convGLM}
\alias{convGLM}
\title{Propensity-weighted generalized linear models for convenience samples}
\usage{
convGLM(
  data,
  outcome_formula,
  response,
  weight_model = "logistic",
  outcome_family = stats::gaussian
)
}
\arguments{
\item{data}{Combined dataset including the convenience sample and representative sample with a subject
identifier, \code{ID}, in the first column, any covariates needed for matching, and an indicator, \code{biased},
that is 1 for subjects in the biased sample in the last column. Note that all factors in the dataset
should either  be binary or of class factor}

\item{outcome_formula}{Model formula for the final outcome model to be fit in the convenience sample.}

\item{response}{A matrix containing two columns: \code{ID} and \code{response} which is the response for outcome_formula}

\item{weight_model}{Which propensity weight estimation model should be used. Either \code{"logistic"},
\code{"randomForest"}, \code{"CBPS"}, or \code{"entbal"}}

\item{outcome_family}{Error distribution and link function to be used in the outcome model (See
\code{family} for details of family function)}
}
\value{
\code{convGLM} returns a dataframe containing coefficient estimates and corresponding standard errors
for the outcome model
}
\description{
Estimate propensity weights for convenience samples using information from a
representative sample. Fit a generalized model incorporating estimated propensity-weights
with analytic standard errors.When using a logistic propensity weight estimation method,
standard errors are derived using a simultaneous estimating equation approach to
account for uncertainty from the weight estimation process. Otherwise standard errors are design-based.
}
\examples{
data("mtcars")
repsample = mtcars
n = nrow(repsample)
expit = function(x) {exp(x) / (1 + exp(x))}

# Calculate probability of being oversampled
repsample$sampprob = expit(.01*(repsample$am*4 + repsample$carb*3
+ repsample$drat*.9 -repsample$mpg*repsample$disp*.05 + .002*repsample$hp^2 + 80))

# draw biased and representative samples
b.samp = repsample[sample(1:n, 500, prob = repsample$sampprob, replace = TRUE), ]
r.samp = repsample[sample(1:n, 500, replace = TRUE), ]

# Create indicator of biased sample membership
b.samp$biased = 1; r.samp$biased = 0

# Format data to pass to function
Xcomb = data.frame(ID = 1:(1000), rbind(b.samp, r.samp))
Xfit = Xcomb[,c("ID", colnames(Xcomb)[c(2:8,10:12)], "biased")]
response = Xcomb[Xcomb$biased==1,c("ID","vs")]
colnames(response)[2] = "y"

# Fit weighted model
convGLM(data = Xfit, outcome_formula = as.formula(y ~ mpg + cyl), response = response,
weight_model = "randomForest",outcome_family = "quasibinomial")

# Fit unweighted model
glm(vs ~ mpg + cyl, data = Xcomb, subset = (Xcomb$biased == 1), family = binomial)$coef

}
\references{
“Adjustment for Biased Sampling Using NHANES Derived Propensity Weights.”
Bernstein, OM; Vegetabile, BG; Salazar, CR; Grill, JD; Gillen, DL. Under Revision \url{https://arxiv.org/abs/2104.10298}
}
